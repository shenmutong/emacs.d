;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by `savehist'.

(setq savehist-minibuffer-history-variables '(org--links-history tex-compile-history compile-history tmphist org-tags-history read-expression-history command-history evil-ex-history org-read-date-history Info-search-history calc-read-var-name-history bookmark-history regexp-search-ring extended-command-history w3m-input-url-history shell-command-history gud-gdb-history ido-buffer-history file-name-history query-replace-history minibuffer-history ido-file-history))
(setq tex-compile-history '("xpdf" "pdflatex \\\\nonstopmode\\\\input SoftwareRunningProcess.tex" "dfipdf"))
(setq compile-history '("dot -Tpng \"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareWorkFlow/SoftwareRuningProcess.dot\" -o\"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareWorkFlow/SoftwareRuningProcess.png\"" "dot -Tpng \"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.dot\" -o\"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.png\"" "dot -Tpng \"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/test.dot\" -o\"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/test.png\""))
(setq org-tags-history '("l"))
(setq command-history '((iimage-mode 'toggle) (iimage-mode 'toggle) (iimage-mode 'toggle) (iimage-mode 'toggle) (iimage-mode 'toggle) (iimage-mode 'toggle) (iimage-mode 'toggle) (iimage-mode 'toggle) (iimage-mode 'toggle) (iimage-mode 'toggle) (iimage-mode 'toggle) (iimage-mode 'toggle) (iimage-mode 'toggle) (iimage-mode 'toggle) (iimage-mode 'toggle) (iimage-mode 'toggle) (iimage-mode 'toggle) (iimage-mode 'toggle) (iimage-mode 'toggle) (iimage-mode 'toggle) (iimage-mode 'toggle) (iimage-mode 'toggle) (iimage-mode 'toggle) (iimage-mode 'toggle) (iimage-mode 'toggle) (iimage-mode 'toggle) (find-file "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/TR2000SoftwareWorkFlowDoc/SoftwareWithHardwareWorkFlow.org") (iimage-mode 'toggle) (iimage-mode 'toggle) (iimage-mode 'toggle) (iimage-mode 'toggle) (iimage-mode 'toggle) (iimage-mode 'toggle) (iimage-mode 'toggle) (iimage-mode 'toggle) (iimage-mode 'toggle) (org-toggle-inline-images nil) (picture-mode) (find-file "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/TR2000SoftwareWorkFlowDoc/SoftwareRunningProcess.org") (find-file "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/TR2000SoftwareWorkFlowDoc/TR2000WorkFlow4Tester.org") (ibuffer-find-file "/Users/shenmutong/.emacs.d/localelpa/org-reveal/TR2000WorkFlowDoc4Tester.org" t) (ibuffer-find-file "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRunningProcess.org" t) (list-packages nil) (kill-buffer "SoftwareRunningProcess.pdf") (find-file "/Users/shenmutong/Desktop/SoftwareRunningProcess.pdf") (package-install 'org-pdfview) (package-install 'org-plus-contrib) (package-install 'ox-ioslide) (list-packages nil) (find-file "/Users/shenmutong/.emacs.d/lisp/init-elisp.el") (find-file "/Users/shenmutong/.emacs.d/lisp/init-site-lisp.el") (find-file "/Users/shenmutong/.emacs.d/init.el") (ibuffer-find-file "/Users/shenmutong/.emacs.d/init.el" t) (load-library "ox-reveal") (list-packages nil) (find-file "/Users/shenmutong/GTD/BJMU.org") (ibuffer-find-file "/Users/shenmutong/GTD/IMSProjectDoc/task.org" t) (recover-file "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/OldCodeFunc.org") (kill-buffer "FirstRequirement.org") (ibuffer-find-file "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/Requirements.org" t) (ibuffer-find-file "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/FirstRequirement.org" t) (ibuffer-find-file "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/task.org" t) (find-file "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/OldCodeFunc.org") (list-packages nil) (load-library "ox-reveal") (org-reveal nil) (find-file "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRunningProcess.org") (find-file "/Users/shenmutong/.emacs.d/init.el") (load-library "org-reval") (load-library "ox-reval") (org-reveal nil) (org-reveal nil) (org-reveal nil) (org-reveal nil) (org-reveal nil) (org-reveal nil) (tex-compile "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/" "xpdf") (tex-compile "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/" "pdflatex \\\\nonstopmode\\\\input SoftwareRunningProcess.tex") (tex-compile "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/" "dfipdf") (find-file "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRunningProcess.tex") (yas-load-snippet-buffer-and-close 'org-mode nil) (yas-load-snippet-buffer-and-close 'org-mode nil) (yas-load-snippet-buffer-and-close 'org-mode nil) (yas-load-snippet-buffer-and-close 'org-mode nil) (yas-load-snippet-buffer-and-close 'org-mode nil) (yas-new-snippet nil) (yas-load-snippet-buffer-and-close 'org-mode nil) (yas-load-snippet-buffer-and-close 'org-mode nil) (yas-new-snippet nil) (yas-load-snippet-buffer-and-close 'org-mode nil) (yas-load-snippet-buffer-and-close 'org-mode nil) (yas-load-snippet-buffer-and-close 'org-mode nil) (yas-load-snippet-buffer-and-close 'org-mode nil) (yas-load-snippet-buffer-and-close 'org-mode nil) (yas-load-snippet-buffer-and-close 'y nil) (yas-new-snippet nil) (yas-load-snippet-buffer-and-close 'org-mode nil) (yas-new-snippet nil) (yas-load-snippet-buffer-and-close 'org-mode nil) (yas-new-snippet nil) (yas-load-snippet-buffer-and-close 'org-mode nil) (switch-to-buffer "CreateNewDownLine") (yas-load-snippet-buffer-and-close 'org-mode nil) (yas-new-snippet nil) (find-file "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRunningProcess.org") (find-file "/Users/shenmutong/.emacs.d/init.el") (find-file "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRunningProcess.org") (find-file "/Users/shenmutong/.emacs.d/init.el") (find-file "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRunningProcess.org") (find-file "/Users/shenmutong/GTD/task.org") (find-file "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/task.org") (compile "dot -Tpng \"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareWorkFlow/SoftwareRuningProcess.dot\" -o\"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareWorkFlow/SoftwareRuningProcess.png\"" nil) (compile "dot -Tpng \"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareWorkFlow/SoftwareRuningProcess.dot\" -o\"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareWorkFlow/SoftwareRuningProcess.png\"" nil) (compile "dot -Tpng \"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareWorkFlow/SoftwareRuningProcess.dot\" -o\"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareWorkFlow/SoftwareRuningProcess.png\"" nil) (compile "dot -Tpng \"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareWorkFlow/SoftwareRuningProcess.dot\" -o\"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareWorkFlow/SoftwareRuningProcess.png\"" nil) (compile "dot -Tpng \"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareWorkFlow/SoftwareRuningProcess.dot\" -o\"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareWorkFlow/SoftwareRuningProcess.png\"" nil) (compile "dot -Tpng \"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareWorkFlow/SoftwareRuningProcess.dot\" -o\"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareWorkFlow/SoftwareRuningProcess.png\"" nil) (find-file "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareWorkFlow/SoftwareRuningProcess.dot") (iimage-mode 'toggle) (iimage-mode 'toggle) (iimage-mode 'toggle) (shell-mode) (shell nil) (find-file "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRunningProcess.org") (list-packages nil) (find-file "/Users/shenmutong/.emacs.d/init.el") (list-packages nil) (org-mode) (list-packages nil) (plantuml-mode) (list-packages nil) (find-file "/Users/shenmutong/.emacs-bmk-bmenu-state.el") (find-file "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRunningProcess.org") (find-file "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.dot") (find-file "/Users/shenmutong/.emacs.d/lisp/init-org.el") (find-file "/Users/shenmutong/.emacs.d/lisp/init-bbdb.el") (find-file "/Users/shenmutong/.emacs.d/init.el") (find-file "~/.emacs.d/init.el" t) (find-file "/Users/shenmutong/.emacs.d/site-lisp/org2nikola/org2nikola.el") (find-file "/Users/shenmutong/.emacs.d/site-lisp/org-mime/org-mime.el") (find-file "/Users/shenmutong/.emacs.d/init.el") (org-mode) (find-file "/Users/shenmutong/Documents/test.plantuml") (find-file "/Users/shenmutong/.emacs.d/site-lisp/org2nikola/org2nikola-pkg.el") (find-file "/Users/shenmutong/.emacs.d/site-lisp/org-mime/org-mime.el") (find-file "~/.emacs.d/lisp/init-org.el" t) (kill-buffer "init.el") (kill-buffer "*PLANTUML Preview*") (org-mode) (customize-variable 'plantuml-jar-path) (list-packages nil) (plantuml-mode) (list-packages nil) (find-file "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRunningProcess.org") (find-file "/Users/shenmutong/.emacs.d/init.el") (find-file "/Users/shenmutong/.emacs.d/elpa/plantuml-mode-1.1.0/plantuml-mode-autoloads.el") (find-file "/Users/shenmutong/.emacs.d/elpa/plantuml-mode-1.1.0/plantuml-mode-pkg.el") (find-file "/Users/shenmutong/.emacs.d/elpa/plantuml-mode-1.1.0/plantuml-mode.el") (helm-list-elisp-packages nil) (find-file "/Users/shenmutong/.emacs.d/lisp/init-modeline.el") (find-file "/Users/shenmutong/.emacs.d/init.el") (plantuml-mode) (kill-buffer "plantuml-mode-autoloads.el") (kill-buffer "*Help*") (list-packages nil) (package-install '##) (find-file "/Users/shenmutong/.emacs.d/init.el") (compile "dot -Tpng \"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.dot\" -o\"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.png\"" nil) (compile "dot -Tpng \"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.dot\" -o\"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.png\"" nil) (compile "dot -Tpng \"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.dot\" -o\"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.png\"" nil) (compile "dot -Tpng \"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.dot\" -o\"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.png\"" nil) (compile "dot -Tpng \"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.dot\" -o\"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.png\"" nil) (compile "dot -Tpng \"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.dot\" -o\"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.png\"" nil) (compile "dot -Tpng \"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.dot\" -o\"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.png\"" nil) (compile "dot -Tpng \"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.dot\" -o\"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.png\"" nil) (compile "dot -Tpng \"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.dot\" -o\"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.png\"" nil) (compile "dot -Tpng \"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.dot\" -o\"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.png\"" nil) (compile "dot -Tpng \"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.dot\" -o\"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.png\"" nil) (compile "dot -Tpng \"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.dot\" -o\"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.png\"" nil) (compile "dot -Tpng \"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.dot\" -o\"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.png\"" nil) (compile "dot -Tpng \"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.dot\" -o\"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.png\"" nil) (compile "dot -Tpng \"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.dot\" -o\"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.png\"" nil) (compile "dot -Tpng \"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.dot\" -o\"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.png\"" nil) (compile "dot -Tpng \"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.dot\" -o\"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.png\"" nil) (compile "dot -Tpng \"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.dot\" -o\"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.png\"" nil) (compile "dot -Tpng \"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.dot\" -o\"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.png\"" nil) (compile "dot -Tpng \"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.dot\" -o\"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.png\"" nil) (compile "dot -Tpng \"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.dot\" -o\"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.png\"" nil) (compile "dot -Tpng \"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.dot\" -o\"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.png\"" nil) (compile "dot -Tpng \"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.dot\" -o\"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.png\"" nil) (compile "dot -Tpng \"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.dot\" -o\"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.png\"" nil) (compile "dot -Tpng \"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.dot\" -o\"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.png\"" nil) (compile "dot -Tpng \"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.dot\" -o\"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.png\"" nil) (compile "dot -Tpng \"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.dot\" -o\"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.png\"" nil) (compile "dot -Tpng \"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.dot\" -o\"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.png\"" nil) (find-file "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.dot") (find-file "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRunningProcess.org") (compile "dot -Tpng \"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/test.dot\" -o\"/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/test.png\"" nil) (find-file "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/test.dot") (graphviz-dot-mode) (graphviz-dot-mode) (list-packages nil) (find-file "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRunningProcess.org") (find-file "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/OldCodeFunc.org") (find-file "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/FirstRequirement.org") (recover-file "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/Requirements.org") (recover-file "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/FirstRequirement.org") (find-file "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/FirstRequirement.org") (recover-file "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/task.org") (find-file "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/task.org") (find-file "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/.gitignore") (find-file "/Users/shenmutong/GTD/IMSProjectDoc/task.org") (find-file "/Users/shenmutong/.ssh/id_rsa.pub") (recover-file "/Users/shenmutong/GTD/ProjectDoc/中国孕产妇及子代健康人群队列研究数据管理系统新增需求和时间表.org") (write-file "/Users/shenmutong/GTD/ProjectDoc/#BJMUNewRequireMent.org#") (find-file "/Users/shenmutong/GTD/ProjectDoc/#BJMUNewRequireMent.org#") (find-file "/Users/shenmutong/GTD/ProjectDoc/中国孕产妇及子代健康人群队列研究数据管理系统新增需求和时间表.org") (find-file "/Users/shenmutong/GTD/task.org") (find-file "/Users/shenmutong/GTD/ProjectDoc/中国孕产妇及子代健康人群队列研究数据管理系统新增需求和时间表.org") (find-file "/Users/shenmutong/GTD/ProjectDoc/ServerDatabaseModify.org") (find-file "/Users/shenmutong/GTD/ProjectDoc/CompanySoftwareBussiness.org") (find-file "/Users/shenmutong/GTD/ProjectDoc/BjmuDesignDoc.org") (find-file "/Users/shenmutong/GTD/ProjectDoc/BJUProject/ProjectInf.org") (find-file "/Users/shenmutong/GTD/ProjectDoc/20160816NewRequirement.html") (find-file "/Users/shenmutong/GTD/ProjectDoc/BJMUNewRequireMent.org") (find-file "/Users/shenmutong/GTD/task.org") (recover-file "/Users/shenmutong/GTD/task.org") (find-file "/Users/shenmutong/GTD/task.org") (find-file "/Users/shenmutong/GTD/IMSProjectDoc/OldCodeFunc.org") (find-file "/Users/shenmutong/GTD/task.org") (kill-buffer "TestEnginerRequirement.org") (recover-file "/Users/shenmutong/GTD/TestEnginerRequirement.org") (find-file "/Users/shenmutong/GTD/TestEnginerRequirement.org") (find-file "/Users/shenmutong/GTD/IMSProjectDoc/OldCodeFunc.org") (find-file "/Users/shenmutong/GTD/.git/config") (find-file "/Users/shenmutong/GTD/.gitignore") (find-file "/Users/shenmutong/GTD/IMSProjectDoc/FirstRequirement.html") (recover-file "/Users/shenmutong/GTD/IMSProjectDoc/task.org") (find-file "/Users/shenmutong/GTD/IMSProjectDoc/task.org") (find-file "/Users/shenmutong/GTD/IMSProjectDoc/FirstRequirement.org") (find-file "/Users/shenmutong/GTD/IMSProjectDoc/Requirements.org") (recover-file "/Users/shenmutong/GTD/IMSProjectDoc/task.org") (find-file "/Users/shenmutong/GTD/IMSProjectDoc/task.org") (find-file "/Users/shenmutong/GTD/task.org") (find-file "/sudo:root@localhost:/Users/shenmutong/GTD/task.org") (edit-picture) (make-directory "/sudo:root@localhost:/Users/shenmutong/GTD/IMSProjectDoc/" t) (find-file "/Users/shenmutong/GTD/IMSProjectDoc/task.org") (find-file "/Users/shenmutong/GTD/ProjectDoc/ServerDatabaseModify.org") (recover-file "/Users/shenmutong/GTD/ProjectDoc/现场测试需求需求变更.org") (find-file "/Users/shenmutong/GTD/ProjectDoc/现场测试需求需求变更.org") (find-file "/Users/shenmutong/Desktop/specified/TR2000DC/Project/Template/main.c") (find-file "/Users/shenmutong/GTD/task.org") (find-file "/Users/shenmutong/GTD/ProjectDoc/BJUProject/ProjectInf.org") (kill-buffer "config") (find-file "/Users/shenmutong/GTD/.git/config") (kill-buffer "config") (find-file "/Users/shenmutong/GTD/.git/config") (find-file "/Users/shenmutong/.ssh/id_rsa.pub") (find-file "/Users/shenmutong/GTD/task.org") (kill-buffer "task.org") (find-file "/Users/shenmutong/GTD/task.org") (kill-buffer "*shell*") (shell nil) (kill-buffer "task.org") (kill-buffer "*Ibuffer*") (find-file "/Users/shenmutong/GTD/task.org") (find-file "/Users/shenmutong/vrwiki.github.io/index.org") (kill-buffer "index.html") (find-file "/Users/shenmutong/shenmutong.github.io/index.html") (shell nil) (find-file "/Users/shenmutong/shenmutong.github.io/index.org") (find-file "/Users/shenmutong/GTD/task.org") (kill-buffer "*Isearch completions*") (kill-buffer "*tramp/sudo root@localhost*") (kill-buffer "*Ibuffer*") (find-file "/System/Library/LaunchDaemons/ssh.plist") (find-file "/Users/shenmutong/GTD/3Monthtask.org") (find-file "/Users/shenmutong/.ssh/id_rsa.pub") (find-file "/Users/shenmutong/GTD/BeijingUProject.org") (find-file "/Users/shenmutong/GTD/project.org") (find-file "/Users/shenmutong/Desktop/MIISystemProject/.gitignore") (find-file "/Users/shenmutong/.emacs.d/lisp/init-org.el") (find-file "/Users/shenmutong/.emacs.d/lisp/init-org-mime.el") (find-file "/Users/shenmutong/.emacs.d/init.el") (ibuffer-find-file "/Users/shenmutong/GTD/task.org" t) (kill-buffer ".gitignore") (find-file "/Users/shenmutong/Desktop/[E] Windows 8.1/MIISystemProject/.gitignore") (write-file "/Users/shenmutong/GTD/project.org") (kill-buffer "config") (find-file "/Users/shenmutong/GTD/.git/config") (find-file "/Users/shenmutong/GTD/note.org") (kill-buffer ".zshrc") (find-file "/Users/shenmutong/.zshrc") (write-file "/Users/shenmutong/GTD/BeijingUProject.org") (find-file "/Users/shenmutong/GTD/BeijingUProject") (describe-key [142606456] 1 nil) (sudo-edit nil) (find-file "/sudo:root@localhost:/System/Library/LaunchDaemons/ssh.plist") (find-file "/Users/shenmutong/WorkSpace/IMSProject/IMSProject.org") (find-file "/System/Library/LaunchDaemons/com.apple.locate.plist") (kill-buffer "config • IMSProject") (find-file "/Users/shenmutong/WorkSpace/IMSProject/.git/config") (find-file "/Users/shenmutong/.emacs.d/lisp/init-evil.el") (evil-delete 14498 14518 'line nil nil) (evil-find-char nil 108) (evil-find-char nil 107) (evil-find-char nil 102) (evil-find-char nil 110) (evil-find-char nil 70) (evil-delete 15342 15370 'line nil nil) (evil-delete 15317 15345 'line nil nil) (evil-delete 14518 14546 'line nil nil) (ace-jump-word-mode 106) (w3m-goto-url-new-session "http://www.google.com.hk" nil nil nil nil) (w3m-goto-url-new-session "http://www.google.com/search?btnI=I%%27m+Feeling+Lucky&ie=UTF-8&oe=UTF-8&q=www.google.com.hk" nil nil nil nil) (w3m "http://www.google.com.au" nil t) (gnus nil)))
(setq evil-ex-history '(#("set-initial-state" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17))))
(setq org-read-date-history '("   "))
(setq calc-read-var-name-history '("q1"))
(setq regexp-search-ring '("yyy" "yyyy" "yyy" "csharp" "sharp" "org-csh" "ox-" "org-" "ox" "ox-rev" "elpa" "reveal" "ox-re" "org-plus" "org" "org-mode"))
(setq w3m-input-url-history '("http://www.google.com.hk" "www.google.com.hk" "http://bluereader.org/" "http://bluereader.com" "https://www.zhihu.com/question/35264845#answer-24392315" "http://www.zhihu.com" "http://www.heiyan.com" "http://www.baidu.com" "http://doc.qt.io/qt-5/qtest.html"))
(setq shell-command-history '("find . -name '*.[ch]' | xargs etags -a" "find -name '*.[ch]' | xargs etags -a" "rm -rf TAGS " "rm -rf TAGS" " find . -name '*.[ch]' | xargs etags -a" "rm rf TAGS" "rm -rf .#ffmpeg.c " "find . -name \"*.cpp\" -print -o -name \"*.h\" -print | etags -  " "etags *.[ch]"))
(setq gud-gdb-history '("gdb -i=mi tst_bsguiuinttsttest.cpp"))
(setq ido-buffer-history '("SoftwareRunningProcess.pdf" "FirstRequirement.org" "CreateNewDownLine" "init.el" "*PLANTUML Preview*" "plantuml-mode-autoloads.el" "*Help*" "TestEnginerRequirement.org" "config" "task.org" "*shell*" "task.org" "*Ibuffer*" "index.html" "*Isearch completions*" "*tramp/sudo root@localhost*" "*Ibuffer*" ".gitignore" "config" ".zshrc" "config • IMSProject" "init-gnus.el" "*w3m*" "*w3m*<2>" "*Kill Ring*" "task.org" "*Calculator*" "c.el.gz" "*Messages*" "*scratch*" "*clang-error*" "tst_bsguiuinttsttest.cpp" "*helm semantic/imenu*" "*Completions*" "wmcoldiagraph.cpp" "wmcoldiagraph.h" "posix_qextserialport.cpp" "mainwindow.h" "readme.docx" "showspectrogram.cpp" "WMMacrodefinitionSys.h" "WMBizLogicEngine.cpp" "PROBLEMS" "BSGuiUintTst" "*clang-output*" "init.el" "mainwindow.cpp" "*Ibuffer*" "tst_bsguiuinttsttest.h" "WMEngineManager.cpp" "shenmutong" #("BlueSolution.pro" 0 16 (face ido-virtual)) "SoftWareDepartment" ".emacs.d" "WorkSpace" "BlueSolutionProject" "window.el.gz" "*Help*" "ns-win.el.gz" "DefaultKeyBinding.dict" "*shell*" "*ggtags-global*" "QtNewFunctionAdd" nil "init-cc-mode.el" "*gud-tst_bsguiuinttsttest.cpp*"))
(setq file-name-history '("/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/TR2000SoftwareWorkFlowDoc/SoftwareWithHardwareWorkFlow.org" "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/TR2000SoftwareWorkFlowDoc/SoftwareRunningProcess.org" "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/TR2000SoftwareWorkFlowDoc/TR2000WorkFlow4Tester.org" "~/.emacs.d/localelpa/org-reveal/TR2000WorkFlowDoc4Tester.org" "~/Documents/IMSSoftwareProjectDocuments/SoftwareRunningProcess.org" "~/.emacs.d/elpa/csharp-mode-20161105.512/csharp-mode-autoloads.el" "/Users/shenmutong/Desktop/SoftwareRunningProcess.pdf" "~/.emacs.d/elpa/org-plus-contrib-20161102/org-plus-contrib-autoloads.el" "~/.emacs.d/elpa/org-plus-contrib-20161102/org-loaddefs.el" "~/.emacs.d/elpa/ox-ioslide-0.2/ox-ioslide-autoloads.el" "/Users/shenmutong/.emacs.d/lisp/init-elisp.el" "/Users/shenmutong/.emacs.d/lisp/init-site-lisp.el" "/Users/shenmutong/.emacs.d/init.el" "~/.emacs.d/.bookmarks.el" "~/.emacs.d/elpa/org-20161102/org-autoloads.el" "~/.emacs.d/elpa/org-20161102/org-loaddefs.el" "~/.emacs.d/init.el" "/Users/shenmutong/GTD/BJMU.org" "~/GTD/IMSProjectDoc/task.org" "~/Documents/IMSSoftwareProjectDocuments/Requirements.org" "~/Documents/IMSSoftwareProjectDocuments/FirstRequirement.org" "~/Documents/IMSSoftwareProjectDocuments/task.org" "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/OldCodeFunc.org" "~/.emacs.d/elpa/reveal-in-osx-finder-0.3.3/reveal-in-osx-finder-autoloads.el" "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRunningProcess.org" "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRunningProcess.tex" "/Users/shenmutong/GTD/task.org" "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/task.org" "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareWorkFlow/SoftwareRuningProcess.dot" "~/.emacs.d/elpa/ob-http-0.0.5/ob-http-autoloads.el" "/Users/shenmutong/.emacs-bmk-bmenu-state.el" "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.dot" "/Users/shenmutong/.emacs.d/lisp/init-org.el" "/Users/shenmutong/.emacs.d/lisp/init-bbdb.el" "/Users/shenmutong/.emacs.d/site-lisp/org2nikola/org2nikola.el" "/Users/shenmutong/.emacs.d/site-lisp/org-mime/org-mime.el" "/Users/shenmutong/Documents/test.plantuml" "/Users/shenmutong/.emacs.d/site-lisp/org2nikola/org2nikola-pkg.el" "~/.emacs.d/lisp/init-org.el" "/Users/shenmutong/.emacs.d/elpa/plantuml-mode-1.1.0/plantuml-mode-autoloads.el" "/Users/shenmutong/.emacs.d/elpa/plantuml-mode-1.1.0/plantuml-mode-pkg.el" "/Users/shenmutong/.emacs.d/elpa/plantuml-mode-1.1.0/plantuml-mode.el" "/Users/shenmutong/.emacs.d/lisp/init-modeline.el" "~/.emacs.d/elpa/plantuml-mode-1.1.0/plantuml-mode-autoloads.el" "~/Documents/IMSSoftwareProjectDocuments/SoftwareRuningProcess.png" "~/Documents/IMSSoftwareProjectDocuments/test.png" "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/test.dot" "~/.emacs.d/elpa/graphviz-dot-mode-0.4/graphviz-dot-mode-autoloads.el" "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/FirstRequirement.org" "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/.gitignore" "/Users/shenmutong/GTD/IMSProjectDoc/task.org" "/Users/shenmutong/.ssh/id_rsa.pub" "~/GTD/ProjectDoc/中国孕产妇及子代健康人群队列研究数据管理系统新增需求和时间表.org" "/Users/shenmutong/GTD/ProjectDoc/#BJMUNewRequireMent.org#" "/Users/shenmutong/GTD/ProjectDoc/中国孕产妇及子代健康人群队列研究数据管理系统新增需求和时间表.org" "/Users/shenmutong/GTD/ProjectDoc/ServerDatabaseModify.org" "/Users/shenmutong/GTD/ProjectDoc/CompanySoftwareBussiness.org" "/Users/shenmutong/GTD/ProjectDoc/BjmuDesignDoc.org" "/Users/shenmutong/GTD/ProjectDoc/BJUProject/ProjectInf.org" "/Users/shenmutong/GTD/ProjectDoc/20160816NewRequirement.html" "/Users/shenmutong/GTD/ProjectDoc/BJMUNewRequireMent.org" "/Users/shenmutong/GTD/TestEnginerRequirement.org" "/Users/shenmutong/GTD/IMSProjectDoc/OldCodeFunc.org" "/Users/shenmutong/GTD/.git/config" "/Users/shenmutong/GTD/.gitignore" "/Users/shenmutong/GTD/IMSProjectDoc/FirstRequirement.html" "/Users/shenmutong/GTD/IMSProjectDoc/FirstRequirement.org" "/Users/shenmutong/GTD/IMSProjectDoc/Requirements.org" "/sudo:root@localhost:/Users/shenmutong/GTD/task.org" "/sudo:root@localhost:/Users/shenmutong/GTD/IMSProjectDoc/task.org" "/Users/shenmutong/GTD/ProjectDoc/现场测试需求需求变更.org" "/Users/shenmutong/Desktop/specified/TR2000DC/Project/Template/main.c" "/Users/shenmutong/vrwiki.github.io/index.org" "/Users/shenmutong/shenmutong.github.io/index.html" "/Users/shenmutong/shenmutong.github.io/index.org" "/sudo:root@localhost:/System/Library/LaunchDaemons/ssh.plist" "/System/Library/LaunchDaemons/ssh.plist" "/Users/shenmutong/GTD/3Monthtask.org" "/Users/shenmutong/GTD/BeijingUProject.org" "/Users/shenmutong/GTD/project.org" "/Users/shenmutong/Desktop/MIISystemProject/.gitignore" "/Users/shenmutong/.emacs.d/lisp/init-org-mime.el" "~/GTD/task.org" "/Users/shenmutong/Desktop/[E] Windows 8.1/MIISystemProject/.gitignore" "/Users/shenmutong/GTD/note.org" "/Users/shenmutong/.zshrc" "/Users/shenmutong/GTD/BeijingUProject" "/sudo:root@localhost:/sudo:root@localhost:/System/Library/LaunchDaemons/ssh.plist" "/Users/shenmutong/WorkSpace/IMSProject/IMSProject.org" "/sudo:root@localhost:/System/Library/LaunchDaemons/com.apple.locate.plist" "/System/Library/LaunchDaemons/com.apple.locate.plist" "/Users/shenmutong/WorkSpace/IMSProject/.git/config" "~/diary" "/Users/shenmutong/.emacs.d/lisp/init-evil.el" "/Users/shenmutong/.gnus" "/Users/shenmutong/.emacs.d/lisp/init-gnus.el" "~/GTD/note.org" "~/GTD/" "/Users/shenmutong/.emacs.d/lisp/init-osx-keys.el" "/Users/shenmutong/.emacs.d/defuns/buffer-defuns.el" "/usr/local/Cellar/emacs/24.4/share/emacs/24.4/lisp/term/ns-win.el.gz" "~/WorkSpace/SoftWareDepartment/BlueSolutionProject/BlueSolutionSDK/BlueSolutionSDK/WMBSSystemVar.h" "/Applications/Emacs.app/Contents/Resources/etc/NEWS" "~/WorkSpace/SoftWareDepartment/BlueSolutionProject/BlueSolutionSDK/BlueSolutionSDK/WMSysWrongHandle.h" "~/WorkSpace/SoftWareDepartment/BlueSolutionProject/BlueSolutionSDK/BlueSolutionSDK/WMSysWrongHandle.cpp" "~/WorkSpace/SoftWareDepartment/BlueSolutionProject/UintTest/BSGuiUintTst/tst_bsguiuinttsttest.h" "/Applications/Emacs.app/Contents/Resources/lisp/cedet/semantic/bovine/c.el.gz" "/usr/src/Qt5.5.0/TAGS" "~/WorkSpace/SoftWareDepartment/BlueSolutionProject/BSUI_CE/BSUI_CE/mainwindow.cpp" "~/WorkSpace/SoftWareDepartment/BlueSolutionProject/UintTest/BSGuiUintTst/tst_bsguiuinttsttest.cpp" "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/usr/include/sys/cdefs.h" "/Users/shenmutong/WorkSpace/SoftWareDepartment/BlueSolutionProject/UintTest/BSGuiUintTst/tst_bsguiuinttsttest.cpp" "/Users/shenmutong/WorkSpace/SoftWareDepartment/BlueSolutionProject/BSUI_CE/BSUI_CE/mainwindow.cpp" "~/WorkSpace/SoftWareDepartment/BlueSolutionProject/WMiaoLib/WMGraphCtrl/WMGraphCtrlSDK/wmcoldiagraph.cpp" "~/WorkSpace/SoftWareDepartment/BlueSolutionProject/BlueSolutionSDK/BlueSolutionSDK/WMEngineManager.cpp" "~/WorkSpace/SoftWareDepartment/BlueSolutionProject/WMiaoLib/WMGraphCtrl/WMGraphCtrlSDK/wmcoldiagraph.h" "~/WorkSpace/SoftWareDepartment/BlueSolutionProject/WMiaoLib/WMEngineFrameSDK/WMEngineFrameSDK/posix_qextserialport.cpp" "~/WorkSpace/SoftWareDepartment/BlueSolutionProject/BSUI_CE/BSUI_CE/mainwindow.h" "~/WorkSpace/SoftWareDepartment/BlueSolutionProject/readme.docx" "~/WorkSpace/SoftWareDepartment/BlueSolutionProject/BSUI_CE/BSUI_CE/showspectrogram.cpp" "~/WorkSpace/SoftWareDepartment/BlueSolutionProject/WMiaoLib/WMBaseClassSDK/WMBaseClassSDK/WMMacrodefinitionSys.h" "~/WorkSpace/SoftWareDepartment/BlueSolutionProject/BlueSolutionSDK/BlueSolutionSDK/WMBizLogicEngine.cpp" "/Applications/Emacs.app/Contents/Resources/etc/PROBLEMS" "/Users/shenmutong/WorkSpace/SoftWareDepartment/BlueSolutionProject/readme.docx" "~/WorkSpace/SoftWareDepartment/BlueSolutionProject/BlueSolution.pro" "/Applications/Emacs.app/Contents/Resources/lisp/window.el.gz" "/Applications/Emacs.app/Contents/Resources/lisp/term/ns-win.el.gz"))
(setq query-replace-history '("" "_"))
(setq minibuffer-history '("iimage-mode" "file:SoftwarePic/LogWin.png" "iimage-mode" "file:SoftwarePic/HistoryDataWin.png" "历" "file:SoftwarePic/HistoryDataWin.png" "file:SoftwarePic/DopingParamWin.png" "file:SoftwarePic/DetParamWin.png" "file:SoftwarePic/CoronaWin.png" "file:SoftwarePic/CleanWin.png" "iimage-mode" "file:SoftwarePic/CleanParamWin.png" "file:SoftwarePic/AdvantaceMenuWin.png" "file:SoftwarePic/CalibrateWin.png" "file:SoftwarePic/CheckWin.png" "file:SoftwarePic/MenuWin.png" "file:SoftwarePic/MainWin.png" "file:SoftwarePic/WelcomeWin.png" "iimage-mode" "日志界面" "历史数据界面" "掺杂参数设置界面" "检测参数设置界面 " "电晕校准界面" "清洁界面" "清洁参数设置界面" "高级参数设置界面" "标定界面" "检测界面" "预热主界面" "file:SoftwarePic/MainWin.png" "菜单界面" "主界面" "org-toggle-inline-images" "picture-mode" "欢迎界面" "list-packages" "package-install" "org-pdfview" "package-install" "org-plus-contrib" "package-install" "ox-ioslide" "package-install" "list-packages" "ox-reveal" "load-library" "list-packages" "recover-file" "list-packages" "ox-reveal" "load-library" "org-reveal" "org-reval" "load-library" "ox-reval" "load-library" "org-reveal" "org-reval-all" "org-reveal" "org-mode" "PlantUMlCreateEndLine" "org-mode" "yas-new-snippet" "org-mode" "PlantUmlCreateSrc" "org-mode" "yas-new-snippet" "org-mode" "PlantumlCreateSrc" "org-mode" "y" "yas-new-snippet" "plantUmlCreateNotey" "org-mode" "yas-new-snippet" "CreateIfElse" "org-mode" "yas-new-snippet" "org-mode" "CreateNewDownLine" "org-mode" "yas-new-snippet" "iimage-mode" "软件初始化流程图" "iimage-mode" "软件初始化流程图" "shell-mode" "shell" "list-packages" "org-mode" "list-packages" "org-babel-load-file" "plantuml-mode" "list-packages" "org-babel-load-file" "org-mode" "plantuml-jar-path" "customize-variable" "list-packages" "package-install" "plantuml-mode" "list-packages" "plant" "helm-list-elisp-packages" "plantuml-mode" "list-packages" "package-install" "graphviz-dot-mode" "list-packages" "graphviz" "recover-file" "edit-picture" "make-directory" "recover-file" "shell" "w3m-goto-url" "sudo-edit" "w3m" "gnus" "keysnail" "gnus" "newsticker-start" "gnus" "shenmutong@hotmail.com" "w3m-goto-url" "recover-file" "calculator-digit" "calculator-mode" "calculator" "calc" "c++-mode" "semantic-mode" "desktop-save-in-desktop-dir" "helm-semantic-or-imenu" "flymake-mode" "direx:find-directory" "direx:jump-to-directory" "lisp-mode" "fundamental-mode" "bmkp-bmenu-mark-variable-list-bookmarks" "csv-nav-mode" "shell" "dired" "speedbar" "visit-tags-table" "ggtags-delete-tags" "tags-reset-tags-tables" "delete-file" "ggtags-create-tags" "company-etags" "m_pHtDiagraphValuetemp" "helm-find" "84743687@qq.com" "www.heiyan.com" "w3m-browse-url" "w3m" "yas/reload-all" "desktop-save" "forward-symbol" "move-beginning-of-line" "http://doc.qt.io/qt-5/qtest.html#QTEST_MAIN" "company-semantic" "ggtags-update-tags" "ggtags-mode" "StopHSDet" "ggtags-reload" "ggtags-find-other-symbol" "register_exit" "main" "yas/new-snippet" "gdb" "\\_<caseaddh\\_>" "shell-mode" "replace-string" "goto-line430"))
(setq ido-file-history '("SoftwareWithHardwareWorkFlow.org" "HistoryDataWin.png" "LogWin.png" "HistoryDataWin.png" "DopingParamWin.png" "DetParamWin.png" "CoronaWin.png" "CleanWin.png" "CleanParamWin.png" "AdvantaceMenuWin.png" "CalibrateWin.png" "CheckWin.png" "MenuWin.png" "MainWin.png" "WelcomeWin.png" "SoftwareRunningProcess.org" "TR2000WorkFlow4Tester.org" "TR2000WorkFlowDoc4Tester.org" "IMSSoftwareProjectDocuments/" "SoftwareRunningProcess.org" "SoftwareRunningProcess.pdf" "init-elisp.el" "init-site-lisp.el" "init.el" "BJMU.org" "task.org" "OldCodeFunc.org" "Requirements.org" "FirstRequirement.org" "task.org" "OldCodeFunc.org" "SoftwareRunningProcess.org" "init.el" "SoftwareRunningProcess.tex" nil "SoftwareRunningProcess.org" "init.el" "SoftwareRunningProcess.org" "init.el" "SoftwareRunningProcess.org" "task.org" "SoftwareRuningProcess.png" "SoftwareRuningProcess.dot" "SoftwareRuningProcess.png" "SoftwareRuningProcess.dot" "SoftwareRunningProcess.org" "init.el" nil ".emacs-bmk-bmenu-state.el" "SoftwareRunningProcess.org" "SoftwareRuningProcess.dot" "init-org.el" "init-bbdb.el" "init.el" "localelpa/" "org2nikola.el" "org-mime.el" "init.el" "test.plantuml" "org2nikola-pkg.el" "org-mime.el" ".emacs.d/" nil "SoftwareRunningProcess.org" "init.el" "plantuml-mode-autoloads.el" "plantuml-mode-pkg.el" "plantuml-mode.el" "init-modeline.el" "init.el" "SoftwareRuningProcess.dot" "SoftwareRunningProcess.org" "test.dot" "SoftwareRunningProcess.org" "OldCodeFunc.org" "FirstRequirement.org" "Requirements.org" "FirstRequirement.org" "task.org" ".gitignore" "task.org" "id_rsa.pub" "中国孕产妇及子代健康人群队列研究数据管理系统新增需求和时间表.org" "#BJMUNewRequireMent.org#" "中国孕产妇及子代健康人群队列研究数据管理系统新增需求和时间表.org" "task.org" "中国孕产妇及子代健康人群队列研究数据管理系统新增需求和时间表.org" "ServerDatabaseModify.org" "CompanySoftwareBussiness.org" "BjmuDesignDoc.org" "ProjectInf.org" "20160816NewRequirement.html" "BJMUNewRequireMent.org" "task.org" "OldCodeFunc.org" "task.org" "TestEnginerRequirement.org" "OldCodeFunc.org" "config" ".gitignore" nil "FirstRequirement.html" "task.org" "FirstRequirement.org" "Requirements.org" "task.org" "ServerDatabaseModify.org" "现场测试需求需求变更.org" "main.c" "task.org" "ProjectInf.org" "config" "id_rsa.pub" "task.org" "index.org" "index.html" "index.org" "task.org" "ssh.plist" "task.org" "3Monthtask.org" "id_rsa.pub" "BeijingUProject.org" "project.org" "task.org" ".gitignore" "init-org.el" "init-org-mime.el" "init.el" "task.org" ".gitignore" "project.org" "BeijingUProject.org" "task.org" "BeijingUProject.org" "3Monthtask.org" "config" "note.org" ".zshrc" "BeijingUProject" "init.el" "ssh.plist" "IMSProject.org" "com.apple.locate.plist" "init-evil.el" ".gnus" "init-gnus.el" ".emacs-bmk-bmenu-state.el" "." nil "init-osx-keys.el" "buffer-defuns.el" "tst_bsguiuinttsttest.cpp" "mainwindow.cpp" "readme.docx" "KeyBindings/" "TAGS" "QtNewFunctionAdd" ".emacs.desktop" "tst_bsguiuinttsttest.h" "UintTest/" "cl-lib.el" "init-cc-mode.el" "ido.last" "recentf" "init-emacs-w3m.el" "mainwindow.h" "ffmpeg.c" "QtUintTestAddNewTestCase1" "QtUintTestAddNewTestCase2" "QtUintTestAddNewTestCase" "UintTestPlan.org" "DesignDocuments" "BSUintTest/" "finished.org" "task.html" "HigerMathematics.org" ".gitconfig" "TestRec.org" "WorkFlow.txt"))
(setq search-ring 'nil)
(setq regexp-search-ring '("yyy" "yyyy" "yyy" "csharp" "sharp" "org-csh" "ox-" "org-" "ox" "ox-rev" "elpa" "reveal" "ox-re" "org-plus" "org" "org-mode"))
(setq kill-ring '(#("-d-> \"获取清洁曲线\"" 0 2 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2 4 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 4 5 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 5 6 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 6 12 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 12 13 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block))) #("if \"是否采集到数据\"
-r->[true] \"采集到数据\"
else
if \"点击停止检测\"
-d->[false]
else
-r->[true] \"停止检测\"
endif
endif

" 0 2 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 2 3 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 3 11 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 11 12 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 12 13 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 13 15 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 15 17 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 17 24 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 24 30 (face (font-lock-string-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 30 31 (face (font-lock-string-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 31 32 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 32 36 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 36 37 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 37 39 (face (font-lock-keyword-face org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 39 40 (face (org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 40 41 (face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 41 46 (face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 46 47 (face (font-lock-string-face org-block) font-lock-multiline t fontified t rear-nonsticky t src-block t font-lock-fontified t) 47 48 (face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 48 49 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block)) 49 51 (face (org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 51 53 (face (font-lock-keyword-face org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 53 59 (face (org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 59 60 (face (org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 60 61 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block)) 61 65 (face (font-lock-keyword-face org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 65 66 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block)) 66 68 (face (org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 68 70 (face (font-lock-keyword-face org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 70 77 (face (org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 77 82 (face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 82 83 (face (font-lock-string-face org-block) font-lock-multiline t fontified t rear-nonsticky t src-block t font-lock-fontified t) 83 84 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block)) 84 88 (face (font-lock-keyword-face org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 88 89 (face (font-lock-keyword-face org-block) font-lock-multiline t fontified t rear-nonsticky t src-block t font-lock-fontified t) 89 90 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 90 95 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 95 96 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 96 97 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) #("




" 0 1 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1 2 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2 3 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 3 4 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 4 5 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) #("-d->\"采集到数据\"
" 0 2 (face (org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 2 4 (face (font-lock-keyword-face org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 4 10 (face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 10 11 (face (font-lock-string-face org-block) font-lock-multiline t rear-nonsticky t fontified t src-block t font-lock-fontified t) 11 12 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) #("if \"点击停止检测\"
-d->[false]
else
-r->[true] \"停止检测\"
endif" 0 2 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-keyword-face org-block)) 2 3 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block)) 3 4 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block)) 4 9 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block)) 9 10 (font-lock-fontified t src-block t rear-nonsticky t fontified t font-lock-multiline t face (font-lock-string-face org-block)) 10 11 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block)) 11 14 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block)) 14 16 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-keyword-face org-block)) 16 22 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block)) 22 23 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block)) 23 24 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block)) 24 28 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-keyword-face org-block)) 28 29 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block)) 29 31 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block)) 31 33 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-keyword-face org-block)) 33 40 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block)) 40 45 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block)) 45 46 (font-lock-fontified t src-block t rear-nonsticky t fontified t font-lock-multiline t face (font-lock-string-face org-block)) 46 47 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block)) 47 51 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-keyword-face org-block)) 51 52 (font-lock-fontified t src-block t fontified t rear-nonsticky t font-lock-multiline t face (font-lock-keyword-face org-block))) #("-d->[false] \"\"" 0 2 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2 4 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 4 12 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 12 14 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block))) #("-d->\"采集到数据\"" 0 2 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2 4 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 4 10 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 10 11 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block))) #("if \"点击停止检测\"
-d->[false]
else
-r->[true] \"停止检测\"
endif" 0 2 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 2 3 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 3 4 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 4 9 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block)) 9 10 (font-lock-fontified t src-block t fontified t rear-nonsticky t font-lock-multiline t face (font-lock-string-face org-block)) 10 11 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 11 14 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 14 16 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 16 22 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 22 23 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 23 24 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 24 28 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 28 29 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 29 31 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block)) 31 33 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-keyword-face org-block)) 33 40 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block)) 40 45 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block)) 45 46 (font-lock-fontified t src-block t fontified t rear-nonsticky t font-lock-multiline t face (font-lock-string-face org-block)) 46 47 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 47 52 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block))) #("-r->[true] \"停止检测\"" 0 2 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2 4 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 4 11 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 11 16 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 16 17 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block))) #("-d-> \"nextStep2\"" 0 2 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2 4 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 4 5 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 5 15 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 15 16 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block))) #("-d-> \"nextStep1\"" 0 2 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2 4 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 4 5 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 5 15 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 15 16 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block))) #("nextStep1\"" 0 9 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 9 10 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block))) #("检测清洁模式数据\"" 0 8 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block)) 8 9 (font-lock-fontified t src-block t fontified t rear-nonsticky t font-lock-multiline t face (font-lock-string-face org-block))) #("-d-> \"检测清洁模式数据\"" 0 2 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2 4 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 4 5 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 5 14 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 14 15 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block))) #("-d-> \"检测采集数据数据数量\"" 0 2 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2 4 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 4 5 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 5 12 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 12 16 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 16 17 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block))) #("-d-> \"nextStep3\"" 0 2 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2 4 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 4 5 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 5 16 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block))) #("-d-> \"nextStep3\"" 0 2 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2 4 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 4 5 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 5 16 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block))) #("-r->[true] \"nextStep2\"" 0 2 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2 4 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 4 11 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 11 21 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 21 22 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block))) #("

if \"\"

" 0 1 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1 2 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2 4 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 4 5 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 5 6 (face (font-lock-string-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 6 7 (face (font-lock-string-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 7 8 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 8 9 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) #("else
-d->[] \"\"" 0 4 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 4 5 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 5 7 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 7 9 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 9 12 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 12 14 (face (font-lock-string-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) #("点击停止检测" 0 6 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block))) #("停止检测" 0 4 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block))) #(" -d-> \"设置进样泵流量 为进样流量 \"
 note right
 如果为单管模式  
 设置进样泵流量为0
 end note
 -d-> \"设置无源电晕到待机状态\"
 -d-> \"等待用户操作 后进入清洁模式\"
 -d->(*)" 0 1 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1 3 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 3 5 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 5 6 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 6 21 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 21 22 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 22 23 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 23 24 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 24 28 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 28 44 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 44 56 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 56 57 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 57 61 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 61 68 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 68 70 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 70 72 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 72 73 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 73 85 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 85 86 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 86 90 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 90 92 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 92 93 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 93 108 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 108 109 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 109 110 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 110 113 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 113 115 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 115 117 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 117 118 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) #("pcn
if()
 



" 0 3 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 3 4 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 4 6 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 6 7 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 7 8 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 8 9 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 9 10 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 10 11 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 11 12 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 12 13 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 13 14 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) #("-r->[true] \"发送清洁关闭指令\"
-d-> \"无源电晕设置为待机状态\"
-d-> \"设置LED为绿色\"
-d-> \"设置进样泵为进样流量\"

" 0 2 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block)) 2 4 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-keyword-face org-block)) 4 9 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block)) 9 11 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block)) 11 12 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block)) 12 20 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block)) 20 21 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block)) 21 22 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block)) 22 24 (face (org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 24 26 (face (font-lock-keyword-face org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 26 27 (face (org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 27 28 (face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 28 39 (face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 39 40 (face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 40 41 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block)) 41 43 (face (org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 43 45 (face (font-lock-keyword-face org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 45 46 (face (org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 46 47 (face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 47 55 (face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 55 56 (face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 56 57 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block)) 57 59 (face (org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 59 61 (face (font-lock-keyword-face org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 61 62 (face (org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 62 63 (face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 63 73 (face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 73 74 (face (font-lock-string-face org-block) font-lock-multiline t rear-nonsticky t fontified t src-block t font-lock-fontified t) 74 75 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 75 76 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) #("-d-> \"发送清洁关闭指令\"
-d-> \"无源电晕设置为待机状态\"
-d-> \"设置LED为绿色\"
-d-> \"设置进样泵为进样流量\"" 0 2 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2 4 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 4 5 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 5 6 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 6 14 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block)) 14 15 (font-lock-fontified t src-block t rear-nonsticky t fontified t font-lock-multiline t face (font-lock-string-face org-block)) 15 16 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 16 17 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 17 18 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 18 20 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 20 21 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 21 22 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 22 33 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 33 34 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 34 35 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 35 37 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 37 39 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 39 40 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 40 41 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 41 49 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 49 50 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 50 51 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 51 53 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 53 55 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 55 56 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 56 57 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 57 67 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 67 68 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block))) #("-d-> \"发送清洁关闭指令\"
-d-> \"无源电晕设置为待机状态\"
-d-> \"设置LED为绿色\"
" 0 2 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2 4 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 4 5 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 5 6 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 6 14 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block)) 14 15 (font-lock-fontified t src-block t rear-nonsticky t fontified t font-lock-multiline t face (font-lock-string-face org-block)) 15 16 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 16 17 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 17 18 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 18 20 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 20 21 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 21 22 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 22 33 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 33 34 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 34 35 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 35 37 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 37 39 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 39 40 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 40 41 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 41 49 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 49 50 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 50 51 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) #("发送清洁关闭指令\"" 0 8 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block)) 8 9 (font-lock-fontified t src-block t fontified t rear-nonsticky t font-lock-multiline t face (font-lock-string-face org-block))) #("-r->[true] \"发送清洁关闭指令\"" 0 2 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2 4 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 4 9 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 9 11 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 11 20 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 20 21 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block))) #("
-r->[true] \"发送清洁关闭指令\"
-d-> \"无源电晕设置为待机状态\"
-d-> \"设置LED为绿色\"
-d-> \"设置进样泵为进样流量\"" 0 3 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 3 5 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 5 10 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 10 12 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 12 21 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 21 22 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 22 23 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 23 25 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 25 27 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 27 28 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 28 40 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 40 41 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 41 42 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 42 44 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 44 46 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 46 47 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 47 56 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 56 57 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 57 58 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 58 60 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 60 62 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 62 63 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 63 74 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 74 75 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block))) #("-d->[] \"\"" 0 2 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2 4 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 4 7 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 7 9 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block))) #("-d->[] \"\"" 0 2 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2 4 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 4 7 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 7 9 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block))) #("-d->[false] (*)" 0 2 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2 4 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 4 12 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 12 14 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 14 15 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) #("-d->[] \"\"" 0 2 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2 4 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 4 7 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 7 9 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block))) #("清洁模式不是最高模式" 0 10 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) #("-d-> \"\"" 0 2 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 2 4 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) src-block t) 4 5 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 5 7 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) src-block t)) #("-d-> \"停止报警声音\"" 0 1 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1 2 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2 4 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 4 5 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 5 6 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 6 12 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block)) 12 13 (font-lock-fontified t src-block t fontified t rear-nonsticky t font-lock-multiline t face (font-lock-string-face org-block))) #("停止报警声音\"" 0 6 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 6 7 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block))) #("
" 0 1 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) #("end while (empty)

while ( \"\" ) is (true)
  :read data;
end while(false)



" 0 3 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 3 10 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 10 17 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 17 18 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 18 19 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 19 24 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 24 25 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 25 27 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 27 28 (face (font-lock-string-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 28 29 (face (font-lock-string-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 29 30 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 30 31 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 31 32 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 32 35 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 35 40 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 40 41 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 41 42 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 42 44 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 44 55 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 55 56 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 56 59 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 59 65 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 65 71 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 71 72 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 72 73 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 73 74 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 74 75 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 75 76 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) #(" -d->" 0 3 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 3 5 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block))) #("-d->\"采集到数据\"" 0 2 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2 4 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 4 10 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 10 11 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block))) #("-d->[false] \"\"" 0 2 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2 4 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 4 10 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 10 12 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 12 13 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 13 14 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block))) #("-d->[] \"\"" 0 2 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2 4 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 4 7 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 7 9 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block))) #("-d-> \"是否开\"" 0 2 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2 4 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 4 5 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 5 9 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 9 10 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block))) #("采集线条数量是否达到算法要求?" 0 15 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block))) #("(data available?) " 0 1 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1 16 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 16 18 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) #("is (not empty)" 0 13 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 13 14 (fontified t rear-nonsticky t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) "while (data available?) is (not empty)" #("\"return\"" 0 8 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block))) #("-d-> \"\"" 0 2 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2 4 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 4 5 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 5 6 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 6 7 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block))) #("
" 0 1 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line)) #("if \"CommSampleNeedAverage && CommSampleAverageCount =1\"
note right
  GetCheckData（） L 2241 
  判断采样点数是否满足 若满足 通过
  IMSUtil.GetCheckData()获取并返回数据 IMSUtil L 379
end note
 -d->[true]\"获取数据后，进行平均 存入 _arrCheckData 和 _arrCheckTime\"
 -d->\"设置数据massType\"
else 
 -r->[false]\"获取数据直接存入  _arrCheckData 和 _arrCheckTime\" 
endif
 -d->\"设置数据massType\"" 0 2 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 2 3 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 3 4 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 4 54 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 54 55 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 55 56 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 56 60 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 60 158 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 158 161 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 161 170 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 170 172 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 172 178 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 178 179 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 179 222 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 222 223 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 223 224 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 224 227 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 227 229 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 229 230 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 230 242 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 242 243 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 243 244 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 244 248 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 248 253 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 253 255 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 255 262 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 262 263 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 263 302 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 302 303 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 303 305 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 305 310 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 310 311 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 311 314 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block)) 314 316 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-keyword-face org-block)) 316 317 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block)) 317 329 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block)) 329 330 (font-lock-fontified t src-block t fontified t rear-nonsticky t font-lock-multiline t face (font-lock-string-face org-block))) #(" -d->\"设置数据massType\"" 0 3 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 3 5 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 5 6 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 6 18 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 18 19 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block))) #("设置mobile 为设定值" 0 13 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block))) #("#+AUUUUHOR:" 0 11 (fontified t font-lock-fontified t face org-meta-line)) #("  [SoftwarePic/HistoryDataWin.png]" 0 2 (fontified t) 2 3 (fontified t) 3 32 (fontified t help-echo "LINK: file:SoftwarePic/HistoryDataWin.png" htmlize-link (:uri "file:SoftwarePic/HistoryDataWin.png") org-link-start 1022 display (image :type png :file "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/TR2000SoftwareWorkFlowDoc/SoftwarePic/HistoryDataWin.png") modification-hooks (iimage-modification-hook)) 32 33 (fontified t help-echo "LINK: file:SoftwarePic/HistoryDataWin.png" htmlize-link (:uri "file:SoftwarePic/HistoryDataWin.png") org-link-start 1022 rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) display (image :type png :file "/Users/shenmutong/Documents/IMSSoftwareProjectDocuments/TR2000SoftwareWorkFlowDoc/SoftwarePic/HistoryDataWin.png") modification-hooks (iimage-modification-hook)) 33 34 (fontified t help-echo "LINK: file:SoftwarePic/HistoryDataWin.png" htmlize-link (:uri "file:SoftwarePic/HistoryDataWin.png"))) "日志界面" "掺杂参数设置界面" "检测参数设置"))
